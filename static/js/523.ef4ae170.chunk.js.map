{"version":3,"file":"static/js/523.ef4ae170.chunk.js","mappings":"4PAGMA,EAAG,mCAEF,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAAwBC,GAAxB,gFACCC,EADD,uCAC4CD,EAD5C,oBACgEF,GADhE,SAGkBI,EAAAA,EAAAA,IAAUD,GAH5B,cAGCE,EAHD,yBAKEA,GALF,kEAQA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,gFACCJ,EADD,4DACiEH,EADjE,kBAC8EO,GAD9E,SAGkBH,EAAAA,EAAAA,IAAUD,GAH5B,cAGCE,EAHD,yBAKEA,GALF,kEAQPJ,EAASO,UAAY,CACnBN,SAAUO,IAAAA,OAAAA,YAGZH,EAAeE,UAAY,CACzBD,MAAOE,IAAAA,OAAAA,W,2JCxBIC,EAAOC,EAAAA,GAAAA,KAAH,8EAKJC,EAASD,EAAAA,GAAAA,OAAH,+K,mBCyEnB,EAvEe,WAAO,IAAD,EACnB,GAA4BE,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMX,EAAK,UAAGU,EAAaE,IAAI,gBAApB,QAAgC,GAErCC,GAAWC,EAAAA,EAAAA,MA8BjB,OAjBAC,EAAAA,EAAAA,YAAU,WACM,OAAVf,GAKJD,EAAAA,EAAAA,GAAeC,GACZgB,MAAK,SAAAC,GACJT,EAAUS,EAAKC,KAAKC,SACpBC,QAAQC,IAAIJ,EAAKC,KAAKC,SACtBC,QAAQC,IAAIJ,EAAKC,KAAKC,QACvB,IACAG,OAAM,SAAAC,GACLH,QAAQC,IAAIE,EACb,IAZDf,EAAU,GAab,GAAE,CAACR,EAAOU,KAGT,iCACE,UAACP,EAAD,CAAMqB,SA9BW,SAAAC,GACnBA,EAAIC,iBACJ,IAAMC,EAAaF,EAAIG,cAAcC,SAASC,OAAOC,MACrD,GAA0B,KAAtBJ,EAAWK,OAGb,OAFArB,EAAgB,CAAC,QACjBsB,EAAAA,EAAAA,IAAM,iJAGRtB,EAAgB,CAAEX,MAAO2B,GAC1B,EAqBG,WACE,kBACEO,KAAK,OACLC,KAAK,SACLC,aAAa,MACbC,WAAS,EACTC,YAAY,qBAEd,SAACjC,EAAD,CAAQ6B,KAAK,SAAb,wBAEF,SAAC,KAAD,UACG3B,EAAOgC,KAAI,YAAiC,IAA9BC,EAA6B,EAA7BA,GAAIC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACxB,OACE,yBACE,UAAC,KAAD,CAAYC,GAAE,UAAKH,GAAMI,MAAO,CAAEC,KAAMhC,GAAxC,WACE,gBACEiC,IACkB,OAAhBJ,EACI,uCAAyCA,EACzC,4CAENK,IAAI,YAEN,wBAAKN,QAVAD,EAcZ,QAIR,C,+IC3EYQ,EAAQ5C,EAAAA,GAAAA,GAAH,gEAIL6C,EAAY7C,EAAAA,GAAAA,GAAH,gIAOT8C,GAAa9C,EAAAA,EAAAA,IAAO+C,EAAAA,GAAP/C,CAAH,6V","sources":["components/FetchApi.jsx","styles/Movies.styled.js","pages/Movies.jsx","styles/Home.styled.js"],"sourcesContent":["import axios from 'axios';\nimport PropTypes from 'prop-types';\n\nconst KEY = `db4a3ae686a3cf9655de72dc5716eec8`;\n\nexport async function FetchApi(endPoint) {\n  const BASE_URL = `https://api.themoviedb.org/3/${endPoint}?api_key=${KEY}`;\n\n  const response = await axios.get(BASE_URL);\n\n  return response;\n}\n\nexport async function FetchSearchApi(query) {\n  const BASE_URL = `https://api.themoviedb.org/3/search/movie?api_key=${KEY}&query=${query}`;\n\n  const response = await axios.get(BASE_URL);\n\n  return response;\n}\n\nFetchApi.propTypes = {\n  endPoint: PropTypes.string.isRequired,\n};\n\nFetchSearchApi.propTypes = {\n  query: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Form = styled.form`\n  padding-top: 20px;\n  display: flex;\n  gap: 10px;\n`;\nexport const Button = styled.button`\n  :hover {\n    background-color: white;\n    border-radius: 4px;\n    border: 2px solid orangered;\n    color: orangered;\n    cursor: pointer;\n  }\n`;\n","import { FetchSearchApi } from 'components/FetchApi';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { toast } from 'react-toastify';\n\nimport { useSearchParams, useLocation } from 'react-router-dom';\nimport { Form, Button } from 'styles/Movies.styled';\nimport { StyledLink, TrendList } from 'styles/Home.styled';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const query = searchParams.get('query') ?? '';\n\n  const location = useLocation();\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const inputValue = evt.currentTarget.elements.search.value;\n    if (inputValue.trim() === '') {\n      setSearchParams({});\n      toast('Сформуйте запит для пошуку');\n      return;\n    }\n    setSearchParams({ query: inputValue });\n  };\n\n  useEffect(() => {\n    if (query === null) {\n      setMovies([]);\n      return;\n    }\n\n    FetchSearchApi(query)\n      .then(resp => {\n        setMovies(resp.data.results);\n        console.log(resp.data.results);\n        console.log(resp.data.results);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }, [query, searchParams]);\n\n  return (\n    <>\n      <Form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          name=\"search\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"lookup words...\"\n        />\n        <Button type=\"submit\">Search</Button>\n      </Form>\n      <TrendList>\n        {movies.map(({ id, title, poster_path }) => {\n          return (\n            <li key={id}>\n              <StyledLink to={`${id}`} state={{ from: location }}>\n                <img\n                  src={\n                    poster_path !== null\n                      ? 'https://image.tmdb.org/t/p/original/' + poster_path\n                      : '/goit-react-hw-05-movies/images/image.jpg'\n                  }\n                  alt=\"poster\"\n                />\n                <h3>{title}</h3>\n              </StyledLink>\n            </li>\n          );\n        })}\n      </TrendList>\n    </>\n  );\n};\n\nexport default Movies;\n","import styled from 'styled-components';\nimport { Link } from 'react-router-dom';\n\nexport const Title = styled.h1`\n  text-align: center;\n  color: wheat;\n`;\nexport const TrendList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  gap: 25px;\n  margin-bottom: 50px;\n`;\nexport const StyledLink = styled(Link)`\n  display: flex;\n  justify-content: space-between;\n  flex-direction: column;\n  color: black;\n  font-weight: 500;\n  width: 350px;\n  height: 600px;\n  background-color: rgb(157, 162, 162, 0.25);\n  border-radius: 8px;\n  overflow: hidden;\n  text-align: center;\n\n  :hover {\n    box-shadow: 0px 10px 10px #072f13;\n  }\n`;\n"],"names":["KEY","FetchApi","endPoint","BASE_URL","axios","response","FetchSearchApi","query","propTypes","PropTypes","Form","styled","Button","useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","get","location","useLocation","useEffect","then","resp","data","results","console","log","catch","error","onSubmit","evt","preventDefault","inputValue","currentTarget","elements","search","value","trim","toast","type","name","autoComplete","autoFocus","placeholder","map","id","title","poster_path","to","state","from","src","alt","Title","TrendList","StyledLink","Link"],"sourceRoot":""}